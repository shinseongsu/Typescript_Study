import { SDKMessageData } from '@connectpay/types';
/**
 * @description
 * 커넥트페이와의 통신을 대리해주는 브릿지입니다.
 * 대체로 커넥트페이의 요청을 받아 응답을 리턴하는 역할을 합니다. (ConnectPay <- SDK Pull 방식)
 */
export declare const FrameBridge: {
    /**
     * @description
     * 커넥트페이 UI의 요청이 도착하면 실행될 이벤트 리스너를 등록합니다.
     * @param type
     * 등록할 콜백에 해당하는 메시지 타입입니다.
     * @param callback
     * 첫번째 파라미터로 넘긴 타입의 메시지가 커넥트페이 UI에서 SDK로 전송될 때마다 콜백이 실행됩니다. (ConnectPay -> SDK)
     * 이 콜백이 리턴하는 값은 다시 커넥트페이 UI로 전송됩니다. (ConnectPay <- SDK)
     */
    on<T>(type: SDKMessageData['type'], callback: (params: T) => unknown): void;
    /**
     * @description
     * `on`으로 등록했던 이벤트 리스너를 제거합니다.
     * @param type
     * 등록했던 콜백에 해당되는 메시지 타입입니다.
     * @param callback
     * 등록했던 콜백의 레퍼런스입니다. 레퍼런스가 같을때만 제대로 제거됩니다.
     */
    off<T_1>(type: SDKMessageData['type'], callback: (params: T_1) => unknown): void;
    /**
     * @description
     * 포트를 닫고 커넥트페이로부터 더 이상 메시지를 수신하지 않도록 합니다.
     */
    dispose(): void;
};
